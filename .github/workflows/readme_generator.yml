name: Readme Generator
on:
  workflow_dispatch:
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: output_matrix
        run: |
          yaml_files=$(find . -type f -name '*.yml' -not -path './.github/*' -exec sh -c 'echo "$(dirname "$1")/$(basename -s .yml "$1")"' _ {} \;)
          echo $yaml_files
          yaml_array=$(echo "$yaml_files" | jq -R -s 'split("\n")[:-1] | map(split(" ")) | flatten')
          quoted_array=$(echo "$yaml_array" | jq -c 'map("\"" + . + "\"")')
          target_string='{ "target":'
          end_string=' }'
          json_array="${target_string} ${yaml_array} ${end_string}"
          echo 'matrix='$json_array >> $GITHUB_OUTPUT
    outputs:
      actions: ${{steps.output_matrix.outputs.matrix}}

  run-matrix:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      filename: ${{steps.name_action.outputs.filename}}
      match: ${{steps.check_file.outputs.match}}
      desc-${{steps.name_action.outputs.filename}}:
    strategy:
      matrix:
       target: ${{fromJSON(needs.setup.outputs.actions).target}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Action name
        id: name_action
        run: |
          filename=$(basename "${{ matrix.target }}")
          echo "Filename is: $filename"
          echo 'filename='$filename >> $GITHUB_OUTPUT

      - name: Check if file exists
        id: check_file
        run: |
          if [ -e "${{ matrix.target }}".md ]; then
            echo "File exists!"
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "File does not exist."
            cp "./Ressources/Base_README.md" "${{matrix.target}}".md
            echo "copied"
            echo "match=false" >> $GITHUB_OUTPUT
          fi
          

      - name: Run github-action-readme-generator
        id: doc_generator
        if: steps.check_file.outcome == 'success'
        uses: bitflight-devops/github-action-readme-generator@v1.4.0
        with:
          action: ${{ matrix.target }}.yml
          readme: ${{ matrix.target }}.md
      - name: Get Description
        id: get_desc
        if: steps.doc_generator.outcome == 'success' && ${{steps.check_file.outputs.match}} != 'true'
        run: |
          start_pattern='<!-- start description -->'
          end_pattern='<!-- end description -->'
          start_line=$(grep -n "$start_pattern" "${{matrix.target}}".md | cut -d ":" -f 1)
          end_line=$(grep -n "$end_pattern" "${{matrix.target}}".md | cut -d ":" -f 1)
          content=$(sed -n "$((start_line + 1)),$((end_line - 1))p" "${{matrix.target}}".md)
          result=$(echo "$content" | tr '\n' '<br>')
          mkdir -p outputs
          echo "$result" >> outputs/${{steps.name_action.outputs.filename}}.txt
      - uses: actions/upload-artifact@v3
        id: upload_artifact
        with:
          name: outputs
          path: outputs/*.txt
      - name: Remove files
        id: remove_files
        if: steps.upload_artifact.outcome == 'success'
        run: |
          rm -rf ./outputs/
        ####Sortir ce r√©sultat avec un output et faire un second job avec un second pull request qui ajoute tout un par un
      - name: Create Pull Request
        if: steps.remove_files.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          title: "docs(readme): update ${{steps.name_action.outputs.filename}}.md on ${{ github.ref_name }}"
          commit-message: "docs(readme): updated ${{steps.name_action.outputs.filename}}.md inputs table"
          body: "Updated README.md inputs/outputs tables, according to ${{steps.name_action.outputs.filename}}.yml file"
          branch: update-readme--${{ github.ref_name }}--${{steps.name_action.outputs.filename}}
          delete-branch: true
          labels: bot,documentation

  set_desc:
    needs: [run-matrix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Load outputs
        uses: actions/ownload-artifact@v3
        with:
          name: outputs
          path: outputs
      - run: |
          echo "got artifacts"
          echo $(ls ./outputs)
          echo $(ls outputs)
          echo $(cat outputs/*.txt)
          echo $(cat ./outputs/*.txt)
