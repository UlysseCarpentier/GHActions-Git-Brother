name: Sync Reusable Workflows
# Git App Rights (Repo):
# Contents write
# Pull requests write
# Workflows write

# Create branch protection rule for bot-repo Pull request without review
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
jobs:
  sync_files:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - id: create_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PEM }}
          permissions: >-
            {
              "contents": "write",
              "metadata": "read",
              "pull_requests": "write",
              "workflows": "write"
            }
      - run: "echo 'The created token is masked: ${{ steps.create_token.outputs.token }}'"
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Run GitHub File Sync
        id: sync_files
        #
        #Test dry run or skip pr
        #cause next step only takes whats in the .g/workflows folder
        uses: BetaHuhn/repo-file-sync-action@v1
        with:
          GH_INSTALLATION_TOKEN: ${{ steps.create_token.outputs.token }}
          DRY_RUN: false
#Update this
          GIT_EMAIL: "ulysse.carpentier@do-now.io"
          GIT_USERNAME: "UlysseCarpentier"

      - name: Checkout Repository
        id: checkout_branch
        if: steps.sync_files.outcome == 'success'
        uses: actions/checkout@v3
        with:
          ref: repo-sync/GHActions-Git-Brother/default

      #Maybe delete files before commenting lines
      - name: Comment lines
        if: steps.checkout_branch.outcome == 'success'
        id: comment_lines
        run: |
          for file in $(find . -type f -name 'R_*.yml' -path './.github/*' ); do
            echo "Commenting lines in $file"
            awk '/^name:/ { inside_block = 1; print $0 } inside_block { if (!/^on:/) print "#" $0 } /^on:/ && inside_block { inside_block = 0 } !inside_block { print $0 }' $file > temp_file && mv temp_file $file
          done

      - name: Checkout Repository
        id: checkout_repo
        if: steps.sync_files.outcome == 'success'
        uses: actions/checkout@v3

      - name: Create Pull Request
        id: cpr
        if: steps.checkout_repo.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          title: "Reusable Workflows: Commenting lines"
          commit-message: "Reusable Workflows: Commenting lines"
          body: "Updated workflows files with commented lines"
          branch: repo-sync/GHActions-Git-Brother/default
          delete-branch: false
          token: ${{ steps.create_token.outputs.token }}

#      - name: Enable Pull Request Automerge
#        id: automerge
#        if: steps.cpr.outputs.pull-request-operation == 'created'
#        uses: peter-evans/enable-pull-request-automerge@v3
#        with:
#          token: ${{ steps.create_token.outputs.token }}
#          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
#          merge-method: squash

  slack_notification:
    if: always()
    needs: sync_files
    uses: UlysseCarpentier/GHActions-Git-Brother/.github/workflows/R_Slack_Notification.yml@main
    with:
      notify_when: "failure,success"
      status: "${{ needs.sync_files.outputs.status }}"
      notification_title: "Reusable workflows sync failed"
    secrets:
      #User input
      SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
